proxy:
  secretToken: 

hub:
  baseUrl: /api/jupyterhub
  extraEnv:
    DATALAYER_KEYCLOAK_SCHEME_HOST: "http://datalayer-keycloak-http.datalayer-keycloak.svc.cluster.local"
    DATALAYER_JUPYTERHUB_AUTH_CALLBACK: "http://minikube.local/api/jupyterhub/hub/oauth_callback"
    DATALAYER_TWITTER_OAUTH_CALLBACK_URL: "http://minikube.local/api/auth/twitter/callback"
    DATALAYER_TWITTER_OAUTH_REDIRECT: "http://minikube.local"
    DATALAYER_SOLR_ZK_HOST: "datalayer-solr-zookeeper"
  extraConfig:
    jupyterlab: |
      c.Spawner.default_url = '/lab'
    keycloak: |
      import json, os, urllib

      from tornado.auth import OAuth2Mixin
      from tornado import gen, web
      from tornado.httputil import url_concat
      from tornado.httpclient import HTTPRequest, AsyncHTTPClient

      from jupyterhub.auth import LocalAuthenticator
      from jupyterhub.handlers import LogoutHandler
      from jupyterhub.utils import url_path_join

      from oauthenticator.oauth2 import OAuthLoginHandler, OAuthenticator


      oidc_client_id = 'datalayer'


      class KeycloakMixin(OAuth2Mixin):

          oidc_server_host = os.getenv('DATALAYER_KEYCLOAK_SCHEME_HOST')

          _OAUTH_AUTHORIZE_URL = "{}/auth/realms/datalayer/protocol/openid-connect/auth".format(oidc_server_host)
          _OAUTH_ACCESS_TOKEN_URL = "{}/auth/realms/datalayer/protocol/openid-connect/token".format(oidc_server_host)
          _OAUTH_LOGOUT_URL = "{}/auth/realms/datalayer/protocol/openid-connect/logout".format(oidc_server_host)
          _OAUTH_USERINFO_URL = "{}/auth/realms/datalayer/protocol/openid-connect/userinfo".format(oidc_server_host)

      class KeycloakLoginHandler(OAuthLoginHandler, KeycloakMixin):
          pass

      class KeycloakLogoutHandler(LogoutHandler, KeycloakMixin):
          def get(self):
      #                self.request.protocol, self.request.host,
              params = dict(
                  redirect_uri="%s://%s%slogout" % (
                      'https', self.request.host,
                      self.hub.server.base_url)
              )
              logout_url = KeycloakMixin._OAUTH_LOGOUT_URL
              logout_url = url_concat(logout_url, params)
              self.redirect(logout_url, permanent=False)

      class KeycloakOAuthenticator(OAuthenticator, KeycloakMixin):
          login_service = "Datalayer"
          login_handler = KeycloakLoginHandler

          oidc_server_host = os.getenv('DATALAYER_KEYCLOAK_SCHEME_HOST')

          authorize_url = "{}/auth/realms/{}/protocol/openid-connect/auth".format(oidc_server_host, oidc_client_id)
          access_token_url = "{}/auth/realms/{}/protocol/openid-connect/token".format(oidc_server_host, oidc_client_id)
          oauth_logout_url = "{}/auth/realms/{}/protocol/openid-connect/logout".format(oidc_server_host, oidc_client_id)
          oauth_userinfo_url = "{}/auth/realms/{}/protocol/openid-connect/userinfo".format(oidc_server_host, oidc_client_id)

          def check_whitelist(self, username, authentication=None):
              self.log.info('Checking whilelist for username: %r', username)
              return True

          def logout_url(self, base_url):
              return url_path_join(base_url, 'oauth_logout')

          def get_handlers(self, app):
              handlers = OAuthenticator.get_handlers(self, app)
              handlers.extend([(r'/oauth_logout', KeycloakLogoutHandler)])
              return handlers

          @gen.coroutine
          def authenticate(self, handler, data=None):
              code = handler.get_argument("code", False)
              if not code:
                  raise web.HTTPError(400, "oauth callback made without a token")
              http_client = AsyncHTTPClient()
              params = dict(
                  grant_type='authorization_code',
                  code=code,
                  redirect_uri=self.get_callback_url(handler),
              )
              token_req = HTTPRequest(
                  KeycloakMixin._OAUTH_ACCESS_TOKEN_URL,
                  method="POST",
                  headers={
                      "Accept": "application/json",
                      "Content-Type": "application/x-www-form-urlencoded;charset=utf-8",
                  },
                  auth_username = self.client_id,
                  auth_password = self.client_secret,
                  body = urllib.parse.urlencode(params).encode('utf-8'),
                  )
              token_res = yield http_client.fetch(token_req)
              token_res_json = json.loads(token_res.body.decode('utf8', 'replace'))
              access_token = token_res_json['access_token']
              if not access_token:
                  raise web.HTTPError(400, "failed to get access token")
              self.log.info('oauth token: %r', access_token)
              user_info_req = HTTPRequest(
                  KeycloakMixin._OAUTH_USERINFO_URL,
                  method="GET",
                  headers={
                      "Accept": "application/json",
                      "Authorization": "Bearer {}".format(access_token)
                      },
                  )
      #        self.log.info('user_info_req: {}: '.format(user_info_req))
              user_info_res = yield http_client.fetch(user_info_req)
      #        self.log.info('user_info_res: {}: '.format(user_info_res))
              user_info_res_json = json.loads(user_info_res.body.decode('utf8', 'replace'))
              self.log.info('user_info_res_json: {}: '.format(user_info_res_json))
      #        return user_info_res_json['preferred_username']
              return {
                  'name': user_info_res_json['preferred_username'],
                  'auth_state': {
                      'upstream_token': user_info_res_json,
                  },
              }

          @gen.coroutine
          def pre_spawn_start(self, user, spawner):
              auth_state = yield user.get_auth_state()
              self.log.info('pre_spawn_start auth_state: {}: '.format(auth_state))
              if not auth_state:
                  # auth_state not enabled
                  return
              spawner.environment['OPENID_USER_INFO'] = json.dumps(auth_state['upstream_token'])

      class LocalKeycloakOAuthenticator(LocalAuthenticator, KeycloakOAuthenticator):
          """A version that mixes in local system user creation"""
          pass

      # --- Authenticator ---
      c.JupyterHub.authenticator_class = KeycloakOAuthenticator
      c.KeycloakOAuthenticator.client_id = oidc_client_id
      c.KeycloakOAuthenticator.client_secret = os.getenv('DATALAYER_KEYCLOAK_REALM_CLIENT_SECRET')

      c.Authenticator.enable_auth_state = True
      c.Authenticator.auto_login = True

      c.LocalAuthenticator.create_system_users = True

      c.OAuthenticator.oauth_callback_url = os.getenv('DATALAYER_JUPYTERHUB_AUTH_CALLBACK')
      c.OAuthenticator.client_id = oidc_client_id
      c.OAuthenticator.client_secret = os.getenv('DATALAYER_KEYCLOAK_REALM_CLIENT_SECRET') # oauth2 client secret for your app.

      c.Spawner.environment = {
          'DATALAYER_TWITTER_OAUTH_CONSUMER_KEY': os.getenv('DATALAYER_TWITTER_OAUTH_CONSUMER_KEY'),
          'DATALAYER_TWITTER_OAUTH_CONSUMER_SECRET': os.getenv('DATALAYER_TWITTER_OAUTH_CONSUMER_SECRET'),
          'DATALAYER_TWITTER_OAUTH_CALLBACK_URL': os.getenv('DATALAYER_TWITTER_OAUTH_CALLBACK_URL'),
          'DATALAYER_TWITTER_OAUTH_REDIRECT': os.getenv('DATALAYER_TWITTER_OAUTH_REDIRECT'),
          'DATALAYER_SOLR_ZK_HOST': os.getenv('DATALAYER_SOLR_ZK_HOST'),
      }
      c.Spawner.args = ['--NotebookApp.tornado_settings={"headers":{"Content-Security-Policy": "frame-ancestors *"}}']   
      c.JupyterHub.tornado_settings = { 'headers': { 'Content-Security-Policy': "frame-ancestors *"} }
      c.NotebookApp.tornado_settings = { 'headers': { 'Content-Security-Policy': "frame-ancestors *"} }

singleuser:
  image:
#    name: datalayer/jupyterlab-datalayer
#    tag: 0.0.3
    name: jupyterhub/singleuser
    tag: 4.0.0b1
  extraEnv:
    DATALAYER_TWITTER_OAUTH_CALLBACK_URL: "http://minikube.local/api/auth/twitter/callback"
    DATALAYER_TWITTER_OAUTH_REDIRECT: "http://minikube.local"
    DATALAYER_SOLR_ZK_HOST: "datalayer-solr-zookeeper.datalayer-solr.svc.cluster.local:2181"
    EDITOR: "vim"

ingress:
  enabled: true
  pathSuffix: (/|$)(.*)
  hosts:
    - minikube.local
