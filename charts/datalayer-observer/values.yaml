observer:
  clusterType: any
  certificateIssuer: letsencrypt
  ingressClass: datalayer-traefik
  env:
    DATALAYER_RUN_HOST: "dev1.datalayer.run"

#############################################################
### Monitoring Stack : kube-prometheus-stack chart
#############################################################

## Prometheus, Grafana, and the rest of the kube-prometheus-stack are managed by the dependent chart here:
## https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
## For sample values, please see their documentation.
kube-prometheus-stack:
  enabled: true
  defaultRules:
    create: true
    rules:
      alertmanager: false
  alertmanager:
    alertmanagerSpec:
      nodeSelector:
        role.datalayer.io/system: "true"
    serviceMonitor:
      additionalLabels:
        monitoring.datalayer.io/instance: "observer"
        monitoring.datalayer.io/enabled: "true"
  grafana:
    enabled: true
    # Use random password at installation time for Grafana by default by setting empty value to `adminPassword`.
    # You can find out the actual password by running the following command:
    # kubectl get secret -l app.kubernetes.io/name=grafana -o=jsonpath="{.items[0].data.admin-password}" | base64 --decode
    adminPassword:
    nodeSelector:
      role.datalayer.io/system: "true"
    serviceMonitor:
      labels:
        monitoring.datalayer.io/instance: "observer"
        monitoring.datalayer.io/enabled: "true"
      path: /grafana/metrics
    ## Config to serve from sub_path
    # https://github.com/prometheus-community/helm-charts/issues/201
    # https://github.com/kubernetes/ingress-nginx/issues/6140#issuecomment-1132972644
    grafana.ini:
      server:
        serve_from_sub_path: true
    ingress:
      enabled: false
    # Configure Pulsar dashboards for Grafana
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "pulsar"
            orgId: 1
            folder: "Pulsar"
            type: file
            disableDeletion: true
            editable: true
            options:
              path: /var/lib/grafana/dashboards/pulsar
    dashboards:
      pulsar:
        # Download the maintained dashboards from AL 2.0 licenced repo https://github.com/streamnative/apache-pulsar-grafana-dashboard
        bookkeeper:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/bookkeeper.json
          datasource: Prometheus
        broker:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/broker.json
          datasource: Prometheus
        connector_sink:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_sink.json
          datasource: Prometheus
        connector_source:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_source.json
          datasource: Prometheus
        container:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/container.json
          datasource: Prometheus
        functions:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/functions.json
          datasource: Prometheus
        jvm:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/jvm.json
          datasource: Prometheus
        loadbalance:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/loadbalance.json
          datasource: Prometheus
        messaging:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/messaging.json
          datasource: Prometheus
        node:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/node.json
          datasource: Prometheus
        overview:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/overview.json
          datasource: Prometheus
        proxy:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/proxy.json
          datasource: Prometheus
        recovery:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/recovery.json
          datasource: Prometheus
        topic:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/topic.json
          datasource: Prometheus
        transaction:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/transaction.json
          datasource: Prometheus
        zookeeper:
          url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/zookeeper-3.6.json
          datasource: Prometheus
  prometheus:
    enabled: true
    prometheusSpec:
      routePrefix: /prometheus
      # Scan all namespace for podMonitor
      podMonitorNamespaceSelector: {}
      podMonitorSelector:
        # Add pulsar podMonitors - currently the only one used
        matchExpressions:
          - key: app
            operator: In
            values: [pulsar]
      serviceMonitorSelector:
        matchLabels:
          monitoring.datalayer.io/instance: "observer"
          monitoring.datalayer.io/enabled: "true"
      nodeSelector:
        role.datalayer.io/system: "true"
    serviceMonitor:
      additionalLabels:
        monitoring.datalayer.io/instance: "observer"
        monitoring.datalayer.io/enabled: "true"
    ingress:
      enabled: false
  prometheus-node-exporter:
    enabled: true
    prometheus:
      monitor:
        additionalLabels:
          monitoring.datalayer.io/instance: "observer"
          monitoring.datalayer.io/enabled: "true"
  prometheusOperator:
    nodeSelector:
      role.datalayer.io/system: "true"
    serviceMonitor:
      additionalLabels:
        monitoring.datalayer.io/instance: "observer"
        monitoring.datalayer.io/enabled: "true"
    admissionWebhooks:
      deployment:
        nodeSelector:
          role.datalayer.io/system: "true"
      patch:
        nodeSelector:
          role.datalayer.io/system: "true"

opentelemetry-operator:
  enabled: true
  manager:
    collectorImage:
      repository: otel/opentelemetry-collector-k8s
